{% extends 'base.html.twig' %}
{% form_theme form 'form/form_errors.html.twig' %}
{% block title %}{{ parent() }}{% endblock %}
{% block stylesheets %}
    {{ parent() }}
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script>
      let $collectionHolder;

      // setup an "add a gift" link
      let $addTagLink = $('<a href="#" class="btn btn-warning btn-xl btn-block add_gift_link">Add a Gift</a><br />');
      let $newLinkLi = $('<li></li>').append($addTagLink);

      $(document).ready(function () {
        console.log("All resources finished loading");

        // Get the ul that holds the collection of gifts
        $collectionHolder = $('ul.gifts');

        // add a delete link to all of the existing tag form li elements
        $collectionHolder.find('li').each(function () {
          addTagFormDeleteLink($(this));
        });

        // add the "add a tag" anchor and li to the gifts ul
        $collectionHolder.prepend($newLinkLi);

        // count the current form inputs we have (e.g. 2), use that as the new
        // index when inserting a new item (e.g. 2)
        let lastIndex = $collectionHolder.find(':input[type="text"]').toArray()
          .map(i => $(i).prop('name') ? parseInt($(i).prop('name').replace(/[^0-9]+/, '')) : 0);

        $collectionHolder.data('index', ++lastIndex);

        $addTagLink.on('click', function (e) {
          // prevent the link from creating a "#" on the URL
          e.preventDefault();

          // add a new tag form (see next code block)
          addTagForm($collectionHolder, $newLinkLi);

        });
      });

      function addTagForm($collectionHolder, $newLinkLi) {
        // Get the data-prototype explained earlier
        let prototype = $collectionHolder.data('prototype');

        // get the new index
        let index = $collectionHolder.data('index');

        let newForm = prototype;
        // Need this because we set 'label' => false in GiftType
        // Replace '__name__' in the prototype's HTML to
        // instead be a number based on how many items we have
        newForm = newForm.replace(/__name__/g, index);

        // increase the index with one for the next item
        $collectionHolder.data('index', index + 1);

        // create form input from prototype (inside our <div>)
        let $newForm = $('<div class="input-group"></div>').prepend(newForm);

        // Display the form in the page in an li, before the "Add a tag" link li
        let $newFormLi = $('<li class="form-group"></li>').prepend($newForm);

        // add a delete link to the new form
        addTagFormDeleteLink($newFormLi);

        $newLinkLi.after($newFormLi);


        // call this after the new form element has been added to DOM,
        // because AmazonAutocomplete searches for CSS selector inside document
        addAutocomplete($newFormLi);

      }

      function addTagFormDeleteLink($tagFormLi) {
        let $removeFormA = $('<div class="input-group-append">\n' +
          '<button class="btn btn-danger btn-xl delete-button" type="button"><i class="fa fa-times"></i></button>\n' +
          '</div>');
        $tagFormLi.find('.input-group').append($removeFormA);

        $removeFormA.on('click', function (e) {
          // prevent the link from creating a "#" on the URL
          e.preventDefault();

          // remove the li for the tag form
          $tagFormLi.remove();
        });
      }

      // add Autocomplete
      function addAutocomplete($newLinkLi) {
        console.log($newLinkLi);
        let id = `#${$newLinkLi.find(':input[type="text"]').prop('id').toString()}`;
        console.log(id);

        // Default AmazonAutocomplete configuration
        let autoCompleteConfig = {
          'selector': id,
          delay: 150,
          showWords: true,
          hideOnblur: true,
        };

        let searchInput = new AmazonAutocomplete(autoCompleteConfig);
        searchInput.onSelectedWord(word => {
          searchInput._input.value = word;

          // Log the selected word to the console
          console.log(`selected choice: ${word}...`, searchInput);

          // Loose focus to close/hide autocomplete
          $(searchInput._input).parent().find('.ac__container').toggle();
        });

      }

    </script>
{% endblock %}

{% block body %}
    {{ include('navigation/navigation.html.twig') }}
    <section id="contact">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                    <h2 class="section-heading text-uppercase">Edit your Gift List</h2>
                    <h3 class="section-subheading text-white">On this page you can edit your gift list by adding new
                        gifts and deleting other, in case you suddenly desire something else.<br /> But bring to notice, that
                        you will not be able to delete the gift from the list, upon condition that your friend has already reserved
                        it for you.</h3>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    {{ form_start(form, {
                        'method': 'POST',
                        'attr': {
                            'id': 'createForm',
                            'novalidate': 'novalidate'
                        }}) }}
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                {{ form_widget(form.firstName, {
                                    'attr': {
                                        'class': 'form-control',
                                        'placeholder': 'Your Name'
                                    }}) }}
                                <p class="help-block text-danger">{{ form_errors(form.firstName) }}</p>
                            </div>
                            <div class="form-group">
                                {{ form_widget(form.email, {
                                    'attr': {
                                        'class': 'form-control',
                                        'placeholder': 'Your Email'
                                    }}) }}
                                <p class="help-block text-danger">{{ form_errors(form.email) }}</p>
                            </div>
                            <div class="form-group">
                                <div class="form-group">
                                    {{ form_widget(form.title, {
                                        'attr': {
                                            'class': 'form-control',
                                            'placeholder': 'Title'
                                        }}) }}
                                    <p class="help-block text-danger">{{ form_errors(form.title) }}</p>
                                </div>
                                <div class="form-group">
                                    {{ form_widget(form.description, {
                                        'attr': {
                                            'class': 'form-control',
                                            'placeholder': 'Description'
                                        }}) }}
                                    <p class="help-block text-danger">{{ form_errors(form.description) }}</p>
                                </div>
                                <div class="form-group">
                                    {{ form_widget(form.isPublic) }}
                                    {{ form_label(form.isPublic, 'Make Your Gift List Public', {
                                        'label_attr': {
                                            'class': 'text-white'
                                        }}) }}
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <ul class="gifts"
                                data-prototype="
                                    {{ form_widget(form.gifts.vars.prototype.reservable)|e('html_attr') }}
                                    {{ form_widget(form.gifts.vars.prototype.title)|e('html_attr') }}">
                                {% for gift in form.gifts %}
                                    <li class="form-group">
                                        <div class="input-group">
                                            {{ form_widget(gift.reservable) }}
                                            {{ form_widget(gift.title) }}
                                        </div>
                                    </li>
                                {% endfor %}
                            </ul>
                        </div>

                        <div class="clearfix"></div>
                    </div>

                    <div class="row">
                        <div class="col-sm-12">
                            <div class="form-group">
                                {{ form_widget(form.Save, {
                                    'attr': {
                                        'class': 'btn btn-warning  btn-block btn-xl text-uppercase',
                                    }}) }}
                            </div>
                        </div>
                    </div>
                </div>
                {{ form_end(form) }}

            </div>
        </div>
    </section>
{% endblock %}

{% block footer %}
    {# Footer #}
    {{ include('footer/footer.html.twig') }}
{% endblock %}